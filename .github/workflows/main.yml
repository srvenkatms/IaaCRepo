name: Terraform Workflow

on:
  workflow_dispatch:  # Allows manual triggering from the GitHub Actions UI
  pull_request:       # Automatically triggers on pull requests to the main branch
    branches:
      - main          # Specify the branch for pull request trigger

jobs:
  wiz-iac-scan:
    name: 'WizCLI IaC Scan'
    env:
      POLICY: 'Default IaC policy,secrets'
      SCAN_PATH: '.'
  
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Download WizCLI
        run: |
        curl -o wizcli https://wizcli.app.wiz.io/latest/wizcli && chmod +x wizcli

      - name: Authenticate to Wiz
        run: |
          ./wizcli auth --id "${WIZ_CLIENT_ID}" --secret "${WIZ_CLIENT_SECRET}"
        env:
          WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
          WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

      - name: Run WizCLI IaC Scan
        run: |
          ./wizcli iac scan --path "${SCAN_PATH}" --policy "${POLICY}" --project "${PROJECT}" --output wiz_scan_results.json

      

      - name: Post results to PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RESULTS=$(cat wiz_scan_results.json)
          COMMENT="### Wiz IaC Scan Results\n\`\`\`json\n$RESULTS\n\`\`\`"
          curl -s -H "Authorization: token $GITHUB_TOKEN" -X POST -d "{\"body\": \"$COMMENT\"}" "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

      - name: Check for critical issues
        id: check_critical
        run: |
          CRITICAL_ISSUES=$(jq '.issues[] | select(.severity == "CRITICAL")' wiz_scan_results.json)
          if [ -n "$CRITICAL_ISSUES" ]; then
            echo "Critical issues found!"
            exit 1
          fi

  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Terraform environment variables
        run: |
          echo "Setting up Terraform environment variables..."
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Set Azure Subscription
        run: |
          echo "Setting Azure subscription..."
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --debug

      - name: Check Terraform Formatting
        run: |
          echo "Checking Terraform formatting..."
          terraform fmt -check

      - name: Initialize Terraform
        run: |
          echo "Initializing Terraform..."
          terraform init

      
      
      - name: Terraform Plan
        id: plan
        run: |
          echo "Running Terraform plan..."
          terraform plan -out=tfplan -detailed-exitcode || echo "Terraform plan failed."

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: tfplan

  apply:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Terraform environment variables
        run: |
          echo "Setting up Terraform environment variables..."
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Set Azure Subscription
        run: |
          echo "Setting Azure subscription..."
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --debug

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: .

      - name: Initialize Terraform
        run: |
          echo "Initializing Terraform..."
          terraform init

      - name: Terraform Apply
        run: |
          echo "Applying Terraform plan..."
          terraform apply -input=false tfplan